// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require('Verifier');
const {proof, inputs} = require('../../zokrates/code/square/proof.json');

contract('SquareVerifier', accounts => {

  const account_1 = accounts[0];
  const account_2 = accounts[1];

  describe('SquareVerifier', function () {
    beforeEach(async function () {
      this.contract = await SquareVerifier.new({from: account_1});
    });


    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('verify with correct proof', async function () {
      const isVerified = await this.contract.verifyTx(proof.a, proof.b, proof.c, inputs);
      assert.equal(isVerified, true, "Contract fails verification")
    });


    // Test verification with incorrect proof
    it('verify with incorrect proof', async function () {
      const badInputs = [
        "0x0000000000000000000000000000000000000000000000000000000000000009",
        "0x0000000000000000000000000000000000000000000000000000000000000009"
      ];
      const isVerified = await this.contract.verifyTx(proof.a, proof.b, proof.c, badInputs);
      assert.equal(isVerified, false, "Contract should not pass verification")
    });
  });
});