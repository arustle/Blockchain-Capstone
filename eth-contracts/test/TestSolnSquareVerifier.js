// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SolnSquareVerifier = artifacts.require('SolnSquareVerifier');
const SquareVerifier = artifacts.require('Verifier');
const {proof, inputs} = require('../../zokrates/code/square/proof.json');

contract('SolnSquareVerifier', accounts => {

  const account_1 = accounts[0];
  const account_2 = accounts[0];

  describe('SolnSquareVerifier', function () {
    beforeEach(async function () {
      this.verifier = await SquareVerifier.new();
      this.contract = await SolnSquareVerifier.new(this.verifier.address, {from: account_1});
    });


    // Test if a new solution can be added for contract - SolnSquareVerifier
    it('should return total supply', async function () {
      await this.contract.mint(account_1, 1);
      await this.contract.mint(account_1, 2);
      await this.contract.mint(account_2, 3);

      const count = await this.contract.totalSupply();
      assert.equal(count, 3, "Total supply does not match")
    });

    // Test if a new solution can be added for contract - SolnSquareVerifier
    it('add new solution to contract', async function () {
      let isSolution = await this.contract.isSolution.call(inputs);
      assert.equal(isSolution, false, "Solution has not been verified yet");

      await this.contract.addSolution.sendTransaction(proof.a, proof.b, proof.c, inputs, {from: account_1});

      isSolution = await this.contract.isSolution.call(inputs);
      assert.equal(isSolution, true, "Solution has been verified");
    });


    // Test if an ERC721 token can be minted for contract - SolnSquareVerifier
    it('can token be minted', async function () {
      await this.contract.addSolution.sendTransaction(proof.a, proof.b, proof.c, inputs, {from: account_1});
      await this.contract.mintNFT.sendTransaction(inputs, account_1, {from: account_1});
      const bnTokenId = await this.contract.getTokenId(inputs);
      const tokenOwner = await this.contract.ownerOf(bnTokenId);

      assert.equal(tokenOwner, account_1, "Token owner is not correct");
    });


  });
});